--------------------------------------------------------------------------------
 Chowdah | REST Framework for PHP5
--------------------------------------------------------------------------------

Chowdah is a framework for developing REST applications in PHP5. It contains a
library to manipulate HTTP requests and responses, create "resource" objects 
which can be manipulated via HTTP calls, and manipulate files, documents, and
collection objects.

Requirements:

Chowdah requires PHP 5, and an Apache server with mod_rewrite or any server with
URL-rewriting capabilities.

Usage:

To get started, extract the "chowdah" directory to where you want the Chowdah
library to be located (normally your application's script folder). Next, create
a request-handling script called "request.php" in your script folder that
initializes Chowdah. For example:

	<?php
	
	// load Chowdah class
	require 'chowdah/Chowdah.php';
	
	// import classes, init, &c...
	
	// load Chowdah
	Chowdah::init();
	Chowdah::handleCurrentRequest(new RootResource())->send();
	
	?>

Next, all requests to the root folder must be rewritten to the script. On Apache
servers, this can be done with the following .htaccess file in the root folder:

	# rewrite all requests to the handler
	<IfModule mod_rewrite.c>
	  RewriteEngine On
	  RewriteRule ^.* .application/request.php  # change this to the path of request.php
	</IfModule>
	
	# the following features are disabled to prevent them from modifying
	# URLs (Chowdah takes care of any potential security issues)
	<IfModule mod_security.c>
	  SecFilterEngine Off
	</IfModule>
	<IfModule mod_dir.c>
	  DirectorySlash Off
	</IfModule>

For IIS or other servers, you will need to find an alternative URL rewriting
solution.

Configuration:

To have greater control over how Chowdah operates, you can create a "config.ini"
in your Chowdah directory. The following options are currently available:

  application_root (example: application_root = "..")
  
     By default, Chowdah assumes the root of your application is the parent
     folder of the request handler; this setting allows you to modify this
     behavior. This setting is important for resolving request URLs.

  request_log (example: request_log = "../request.log")
  
     This generates a log of each HTTP request made to a resource, the method
     used, and the time it takes to generate the resource.
     
  mime_types (example: mime_types = "/etc/mime.types")
  
     Points to the location of mime.types on the server. This is useful if you
     are loading static files from the server (using the FSDocument class), and
     when other MIME type detection methods aren't available.

  auth_header_key (example: auth_header_key = "REDIRECT_REMOTE_USER")
  
     On some Apache servers, the Authorization header is not available. By using
     mod_rewrite, you can create a rule to include this header as an environment
     variable:
     
     RewriteRule ^.* .application/request.php [E=REMOTE_USER:%{HTTP:Authorization}]
     
     In the PHP environment, this would may be set as $REDIRECT_REMOTE_USER.
     Check your own environment to see how this acts.
     
  html_form_compat = (true|false)
  
     HTML forms, by default, only support the GET and POST methods. This option
     allows "POST tunnelling"--that is, the support of HTTP methods other than
     POST by directing it through a POST request. By including certain fields in
     your HTML form, you can transparently redirect the submission to another
     method function as if it actually used that method. In your HTML form, add
     a field called "http_method" to specify the method you want to use:
     
       <input type="hidden" name="http_method" value="DELETE">
       
     In your resource, the DELETE() function, rather than POST(), would then be
     called, with no noticable difference as though it were an actual DELETE
     request. In the case of file uploads, you can also specify that an upload
     be used as the body of the request (such as emulating the PUT method):
     
       <input type="file" name="http_content">
       
     This feature is specifically for HTML forms and should not be used in
     situations where using PUT, DELETE, or other methods directly would work.
     Enabling this feature may also be a potential security risk if methods
     other than POST are intentionally blocked; use it at your own risk.
   
   accept.* (example: accept.ie.4 = "text/html,image/*;q=0.9,*/*;q=0.5")
   
     Many older browsers have broken Accept: headers, defeating the usefulness
     of content-negotiation. In your config.ini file, you can specify overrides
     to accept headers, and Chowdah will transparently rewrite your requests.
     Here are some useful overrides:
     
     accept.IE.4 = "text/html,text/plain;q=0.8,image/png,image/*;q=0.9,*/*;q=0.5"
     accept.IE.5 = "text/html,text/xml,text/plain;q=0.8,image/png,image/*;q=0.9,*/*;q=0.5"
     accept.IE.6 = "text/html,text/xml,text/plain;q=0.8,image/png,image/*;q=0.9,*/*;q=0.5"
     accept.Netscape.4 = "text/html,text/plain;q=0.8,image/png,image/*;q=0.9,*/*;q=0.5"
     
   catch_errors = (true|false)
   
     If set to true, all errors are caught and displayed as a 500 Internal
     Server Error. Otherwise, unsuppressed errors are displayed as normal
     (potentially breaking HTTP headers).
     
   catch_exceptions = (true|false)
   
     If set to true, all exceptions are caught and displayed as a 500 Internal 
     Server Error. Otherwise, uncaught exceptions are displayed as normal
     (potentially breaking HTTP headers).
     
Applications:
     
To view sample applications, take a look at the Chowdah website:

	http://chowdah.googlecode.com/
     
Several applications are provided for free for you to examine, modify, and off
which, base your code.
     
Credits:

Chowdah is copyright (c) 2008 Tim Cameron Ryan. The Chowdah library is released
under the GNU General Public License v2 or later.